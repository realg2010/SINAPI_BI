  SUBROUTINE JSL.TOPS.XTR.CRF

    $INSERT I_COMMON
    $INSERT I_EQUATE
    $INSERT I_F.DATES
    $INSERT I_F.COMPANY
    $INSERT I_F.RE.STAT.LINE.CONT
    $INSERT I_F.CONSOLIDATE.ASST.LIAB
    $INSERT I_F.CONSOLIDATE.PRFT.LOSS
    $INSERT I_F.INTERCO.PARAMETER

    GOSUB INIT
    GOSUB PROCESS
	RETURN 
	
*----*	
INIT:
*----*


    FN.INTERCO='F.INTERCO.PARAMETER'
    F.INTERCO=''
    CALL OPF(FN.INTERCO,F.INTERCO)
	
    DLM='|'
	REPORT.DATE=R.DATES(EB.DAT.LAST.WORKING.DAY)[1,4]:'-':R.DATES(EB.DAT.LAST.WORKING.DAY)[5,2]:'-':R.DATES(EB.DAT.LAST.WORKING.DAY)[7,2]
    DB.DATE=TODAY[1,4]:'-':TODAY[5,2]:'-':TODAY[7,2] ; API.ID='JSL.TOPS.API' ; V.RESPONSE='' ; RET.ERR=''
	
    RETURN

*------*
PROCESS:
*------*

    LINE.LIST = ''
    SE.LIST = ''
    DR.TOTAL = 0
    CR.TOTAL = 0
    OUT.ARR = ''
    CRF.FCY.DR.BAL=0 ; CRF.FCY.CR.BAL=0 ; CRF.FCY.BAL=0
	YR.COMPANY = ID.COMPANY ;*'MW0010001'
	YR.MNE=R.COMPANY(EB.COM.MNEMONIC)
	YR.LCY = R.COMPANY(EB.COM.LOCAL.CURRENCY)
    YR.TDY =R.DATES(EB.DAT.LAST.WORKING.DAY)
	SYS.ID='SYSTEM'
	READ R.INTERCO FROM F.INTERCO,SYS.ID ELSE NULL
	MNE.LIST=R.INTERCO<ST.ICP.FIN.MNEMONIC>
	GOSUB PROCESS.CAL
	GOSUB PROCESS.CPL
    RETURN
 
*----------*   
PROCESS.CAL:
*----------*
    MNE.CNT=DCOUNT(MNE.LIST,@VM)
    FOR J=1 TO MNE.CNT
	MNE=MNE.LIST<1,J>
    FN.RE.STAT.LINE.CONT='F':MNE:'.RE.STAT.LINE.CONT'
	F.RE.STAT.LINE.CONT = ''
    CALL OPF(FN.RE.STAT.LINE.CONT, F.RE.STAT.LINE.CONT)
	FN.CONSOLIDATE.ASST.LIAB = 'F':MNE:'.CONSOLIDATE.ASST.LIAB'
	F.CONSOLIDATE.ASST.LIAB= ''
    CALL OPF(FN.CONSOLIDATE.ASST.LIAB, F.CONSOLIDATE.ASST.LIAB)
	SEL.CONT = "SSELECT ":FN.RE.STAT.LINE.CONT:" WITH @ID LIKE SASLGL...  AND ASST.CONSOL.KEY NE ''"
	CALL EB.READLIST(SEL.CONT,LINE.LIST,'','','')

	LOOP
		REMOVE LINE.ID FROM LINE.LIST SETTING GLINEPOS
		       IF GLINEPOS=0 THEN GOSUB LOAD.DATA
	WHILE LINE.ID:GLINEPOS

		CALL F.READ(FN.RE.STAT.LINE.CONT, LINE.ID, R.LINE.CONT.REC, F.RE.STAT.LINE.CONT, LINERR)
		CAL.IDS = R.LINE.CONT.REC<RE.SLC.ASST.CONSOL.KEY>
		CAL.TYPES = R.LINE.CONT.REC<RE.SLC.ASSET.TYPE>
		CRF.LDS = R.LINE.CONT.REC<RE.SLC.DESC,2>
		CAL.CNT = DCOUNT(R.LINE.CONT.REC<RE.SLC.ASST.CONSOL.KEY>, @VM)
		FOR YY = 1 TO CAL.CNT
			SE.ID = R.LINE.CONT.REC<RE.SLC.ASST.CONSOL.KEY><1,YY>
			CAL.TYPE.CNT = DCOUNT(R.LINE.CONT.REC<RE.SLC.ASSET.TYPE,YY>, @SM)
			FOR YX = 1 TO CAL.TYPE.CNT
				CAL.TYPE = R.LINE.CONT.REC<RE.SLC.ASSET.TYPE><1,YY,YX>
				CALL F.READ(FN.CONSOLIDATE.ASST.LIAB,SE.ID,TRI.REC,F.CONSOLIDATE.ASST.LIAB ,RERR)
				CRF.ID = SE.ID
				CRF.CCY = TRI.REC<RE.ASL.CURRENCY>
				CRF.CAT=TRI.REC<RE.ASL.VARIABLE.1>
				CRF.SEC=TRI.REC<RE.ASL.VARIABLE.2>
				CRF.RES=TRI.REC<RE.ASL.VARIABLE.3>
				CRF.IND=TRI.REC<RE.ASL.VARIABLE.8>
				CRF.TYPE = TRI.REC<RE.ASL.TYPE> ; CONVERT VM TO FM IN CRF.TYPE
				LOCATE CAL.TYPE IN CRF.TYPE SETTING CALPOS THEN
					IF CRF.CCY = YR.LCY THEN
						CRF.BAL = TRI.REC<RE.ASL.BALANCE><1,CALPOS>
                        IF TRI.REC<RE.ASL.DATE.LAST.UPDATE> NE YR.TDY THEN
                            CRF.BAL += TRI.REC<RE.ASL.DEBIT.MOVEMENT><1,CALPOS>
                            CRF.BAL += TRI.REC<RE.ASL.CREDIT.MOVEMENT><1,CALPOS>
                        END
					END ELSE
						CRF.BAL = TRI.REC<RE.ASL.LOCAL.BALANCE><1,CALPOS>
						CRF.FCY.BAL=TRI.REC<RE.ASL.BALANCE><1,CALPOS>
                        IF TRI.REC<RE.ASL.DATE.LAST.UPDATE> NE YR.TDY THEN
                            CRF.BAL += TRI.REC<RE.ASL.LOCAL.DEBIT.MVE><1,CALPOS>
                            CRF.BAL += TRI.REC<RE.ASL.LOCAL.CREDT.MVE><1,CALPOS>
							CRF.FCY.BAL+=TRI.REC<RE.ASL.DEBIT.MOVEMENT><1,CALPOS>
							CRF.FCY.BAL+=TRI.REC<RE.ASL.CREDIT.MOVEMENT><1,CALPOS>
                        END
					END
					CRF.TYPE = TRI.REC<RE.ASL.TYPE><1,CALPOS>
					CRF.REF = FIELDS(LINE.ID,'.',1,2)
                    IF CRF.BAL THEN
                        IF CRF.BAL < 0 THEN
                            CRF.DR.BAL = CRF.BAL
                            *DR.TOTAL += CRF.BAL
							CRF.FCY.DR.BAL=CRF.FCY.BAL
                        END 
                        IF CRF.BAL > 0 THEN
                            CRF.CR.BAL = CRF.BAL
                            *CR.TOTAL += CRF.BAL
							CRF.FCY.CR.BAL=CRF.FCY.BAL
                        END
					    GOSUB WRITE.TO.CRF
                    END
				END
                        TRI.REC='' ; CRF.CCY='' ; CRF.CAT='' ; CRF.SEC='' ; CRF.RES='' ; CRF.IND='' ; CRF.TYPE='' ; CRF.ID=''
			NEXT YX
			SE.ID='' ; CAL.TYPE.CNT =''
		NEXT YY
		R.LINE.CONT.REC='' ; CAL.IDS='' ; CAL.TYPES='' ; CRF.LDS='' ; LINE.ID='' ; CAL.CNT=''
	REPEAT
        NEXT J
	RETURN
	
*-----------*	
PROCESS.CPL:
*-----------*
    MNE.CNT=DCOUNT(MNE.LIST,@VM)
    FOR Q=1 TO MNE.CNT
	MNE=MNE.LIST<1,Q>
    FN.RE.STAT.LINE.CONT='F':MNE:'.RE.STAT.LINE.CONT'
	F.RE.STAT.LINE.CONT = ''
    CALL OPF(FN.RE.STAT.LINE.CONT, F.RE.STAT.LINE.CONT)
	FN.CONSOLIDATE.PRFT.LOSS = 'F':MNE:'.CONSOLIDATE.PRFT.LOSS'
	F.CONSOLIDATE.PRFT.LOSS= ''
    CALL OPF(FN.CONSOLIDATE.PRFT.LOSS, F.CONSOLIDATE.PRFT.LOSS)
	SEL.CONT = "SSELECT ":FN.RE.STAT.LINE.CONT:" WITH @ID LIKE SASLPL...  AND PRFT.CONSOL.KEY NE ''"
	CALL EB.READLIST(SEL.CONT,LINE.LIST,'','','')

	LOOP
		REMOVE LINE.ID FROM LINE.LIST SETTING PLINEPOS
			IF PLINEPOS=0 THEN GOSUB LOAD.DATA
	WHILE LINE.ID:PLINEPOS

	CALL F.READ(FN.RE.STAT.LINE.CONT, LINE.ID, R.LINE.CONT.REC,F.RE.STAT.LINE.CONT, LINERR)
	CPL.IDS = R.LINE.CONT.REC<RE.SLC.PRFT.CONSOL.KEY>
	CRF.LDS = R.LINE.CONT.REC<RE.SLC.DESC,2>
	CPL.CNT = DCOUNT(R.LINE.CONT.REC<RE.SLC.PRFT.CONSOL.KEY>, @VM)
	FOR YYP = 1 TO CPL.CNT
		CPL.ID = R.LINE.CONT.REC<RE.SLC.PRFT.CONSOL.KEY><1,YYP>
		CALL F.READ(FN.CONSOLIDATE.PRFT.LOSS,CPL.ID,R.CPL.REC,F.CONSOLIDATE.PRFT.LOSS ,CPLERR)
		CRF.ID = CPL.ID
        CRF.CAT=R.CPL.REC<RE.PTL.VARIABLE.1>
		CRF.PROD=R.CPL.REC<RE.PTL.VARIABLE.2>
		CRF.SEC=R.CPL.REC<RE.PTL.VARIABLE.3>
		CRF.DEPT=R.CPL.REC<RE.PTL.VARIABLE.4>
		CRF.RES=R.CPL.REC<RE.PTL.VARIABLE.5>
        *IF R.CPL.REC<RE.PTL.DATE.LAST.UPDATE> # YR.TDY THEN
            CCY.CNT = DCOUNT(R.CPL.REC<RE.PTL.CURRENCY>, @VM)
            FOR IX = 1 TO CCY.CNT
            *--Check for balances before last working day - Add to Opening balance ---*
                CRF.BALMVT = 0 ; CRF.FCYBALMVT=0
                CRF.CCY = R.CPL.REC<RE.PTL.CURRENCY><1,IX>
                CRF.BALDAY = R.CPL.REC<RE.PTL.BALANCE><1,IX>
                CRF.BALYTD = R.CPL.REC<RE.PTL.BALANCE.YTD><1,IX>
                CRF.BALMVT = R.CPL.REC<RE.PTL.DEBIT.MOVEMENT><1,IX>
                CRF.BALMVT += R.CPL.REC<RE.PTL.CREDIT.MOVEMENT><1,IX>
				CRF.FCYBALDAY =R.CPL.REC<RE.PTL.CCY.BALANCE><1,IX>
				CRF.FCYBALYTD = R.CPL.REC<RE.PTL.CCY.BALANCE.YTD><1,IX>
				CRF.FCYBALMVT = R.CPL.REC<RE.PTL.CCY.CREDT.MVE><1,IX>
				CRF.FCYBALMVT += R.CPL.REC<RE.PTL.CCY.DEBIT.MVE><1,IX>
                CRF.BAL = CRF.BALDAY + CRF.BALYTD + CRF.BALMVT
				CRF.FCY.BAL=CRF.FCYBALDAY + CRF.FCYBALYTD + CRF.FCYBALMVT
                CRF.TYPE = FIELD(CPL.ID,'.',2,1)
                CRF.REF = FIELDS(LINE.ID,'.',1,2)
                IF CRF.BAL THEN
                    IF CRF.BAL < 0 THEN
                        CRF.DR.BAL = CRF.BAL
                        *DR.TOTAL += CRF.BAL
						CRF.FCY.DR.BAL=CRF.FCY.BAL
                    END 
                    IF CRF.BAL > 0 THEN
                        CRF.CR.BAL = CRF.BAL
                        *CR.TOTAL += CRF.BAL
						CRF.FCY.CR.BAL=CRF.FCY.BAL
                    END
                    GOSUB WRITE.TO.CRF
                END
              CRF.CCY='' ; CRF.BALDAY='' ; CRF.BALYTD='' ; CRF.BALMVT='' ; CRF.FCYBALDAY='' ; CRF.FCYBALYTD='' ; CRF.FCYBALMVT='' ; CRF.TYPE=''
            NEXT IX
        *END
		CPL.ID='' ; CRF.ID='' ; CRF.CAT='' ; CRF.PROD='' ; CRF.SEC='' ; CRF.DEPT='' ; CRF.RES='' ; CCY.CNT='' ; R.CPL.REC=''
	NEXT YYP
	CPL.IDS='' ; CRF.LDS='' ; CPL.CNT='' ; R.LINE.CONT.REC='' ; LINE.ID=''	
        REPEAT
        NEXT Q
	RETURN
	
WRITE.TO.CRF:
*---------------
*- Append asset type 
    CHANGE ',' TO ' ' IN CRF.LDS
	BRANCH=RIGHT(CRF.ID,9)
	CALL DBR('COMPANY':FM:EB.COM.COMPANY.NAME,BRANCH,BRANCH.NAME)
	CHANGE ',' TO ' ' IN BRANCH.NAME
    LINE.NO=FIELD(CRF.REF,'.',2)
	CLOSING_BAL_LCY=CRF.CR.BAL + CRF.DR.BAL
	CLOSING_BAL_FCY=CRF.FCY.CR.BAL + CRF.FCY.DR.BAL
	OUT.ARR =CRF.ID:DLM:CRF.REF:DLM:LINE.NO:DLM:DQUOTE(CRF.LDS):DLM:CRF.CCY:DLM:ABS(CRF.DR.BAL):DLM:ABS(CRF.CR.BAL):DLM:ABS(CRF.FCY.DR.BAL):DLM:ABS(CRF.FCY.CR.BAL)
	OUT.ARR:=DLM:CLOSING_BAL_LCY:DLM:CLOSING_BAL_FCY:DLM:YR.MNE:DLM:CRF.TYPE:DLM:CRF.CAT:DLM:CRF.SEC:DLM:CRF.RES:DLM:CRF.PROD:DLM:CRF.DEPT:DLM:CRF.IND
	OUT.ARR:=DLM:BRANCH:DLM:BRANCH.NAME:DLM:REPORT.DATE:DLM:DB.DATE
	PY.LIST<-1>=OUT.ARR
	CNT=DCOUNT(PY.LIST,FM)
	IF CNT EQ '80000' THEN
	   GOSUB LOAD.DATA
	END
	OUT.ARR='' ; CRF.DR.BAL= 0 ; CRF.CR.BAL= 0 ; CRF.BAL=0 ; CRF.FCY.DR.BAL=0 ; CRF.FCY.CR.BAL=0 ; CRF.FCY.BAL=0 ; CRF.REF=''
    CRF.BALDAY=0 ; CRF.BALYTD=0 ; CRF.BALMVT=0 ; CRF.FCYBALDAY=0 ; CRF.FCYBALYTD=0 ; CRF.FCYBALMVT=0 ; BRANCH.NAME='' ; BRANCH='' ; LINE.NO=''
    RETURN

LOAD.DATA:
     IF PY.LIST NE '' THEN
	 PY.LIST=TRIM(PY.LIST,',','A')
	 PY.LIST=TRIM(PY.LIST,"'",'A')
	 PY.LIST=TRIM(PY.LIST,"~",'A')
	 CHANGE FM TO ',' IN PY.LIST
     REQUEST=PY.LIST:"~CRF"
     CALL EB.CALL.JAVA.API(API.ID,REQUEST,V.RESPONSE,RET.ERR)
     PY.LIST=''
END
    RETURN
END


======================================================================
STAGING TABLE SCHEMA
======================================================================
CREATE TABLE CRF
(
 CRFID VARCHAR(100),
 REPORT_LINE VARCHAR(20),
 LINE_NO VARCHAR(10),
 DESCRIPTION VARCHAR(50),
 CURRENCY VARCHAR(5),
 AMOUNT_DR_LCY VARCHAR(20),
 AMOUNT_CR_LCY VARCHAR(20),
 AMOUNT_DR_FCY VARCHAR(20),
 AMOUNT_CR_FCY VARCHAR(20),
 CLOSING_BAL_LCY VARCHAR(20),
 CLOSING_BAL_FCY VARCHAR(20),
 MNEMONIC VARCHAR(5),
 CRF_TYPE VARCHAR(50),
 CRF_CATEGORY VARCHAR(10),
 CRF_SECTOR VARCHAR(10),
 CRF_RESIDENCE VARCHAR(5),
 CRF_PRODUCT VARCHAR(10),
 CRF_DEPT VARCHAR(10),
 CRF_INDUSTRY VARCHAR(10),
 BRANCH VARCHAR(20),
 BRANCH_NAME VARCHAR(100),
 REPORT_DATE VARCHAR(20),
 DB_DATE VARCHAR(20)
)

=======================================================================
DW TABLES
=======================================================================
CREATE TABLE DimGL
(
 GLDWKEY INT IDENTITY PRIMARY KEY,
 CRFID VARCHAR(100),
 REPORT_LINE VARCHAR(20),
 LINE_NO VARCHAR(10),
 DESCRIPTION VARCHAR(50),
 CURRENCY VARCHAR(5),
 MNEMONIC VARCHAR(5),
 CRF_TYPE VARCHAR(50),
 CRF_CATEGORY VARCHAR(10),
 CRF_SECTOR VARCHAR(10),
 CRF_RESIDENCE VARCHAR(5),
 CRF_PRODUCT VARCHAR(10),
 CRF_DEPT VARCHAR(10),
 CRF_INDUSTRY VARCHAR(10),
 BRANCH VARCHAR(20),
 BRANCH_NAME VARCHAR(100),
 CURRENT_FLAG BIT DEFAULT 1
)
GO
CREATE TABLE DimPL
(
 PLDWKEY INT IDENTITY PRIMARY KEY,
 CRFID VARCHAR(100),
 REPORT_LINE VARCHAR(20),
 LINE_NO VARCHAR(10),
 DESCRIPTION VARCHAR(50),
 CURRENCY VARCHAR(5),
 MNEMONIC VARCHAR(5),
 CRF_TYPE VARCHAR(50),
 CRF_CATEGORY VARCHAR(10),
 CRF_SECTOR VARCHAR(10),
 CRF_RESIDENCE VARCHAR(5),
 CRF_PRODUCT VARCHAR(10),
 CRF_DEPT VARCHAR(10),
 CRF_INDUSTRY VARCHAR(10),
 BRANCH VARCHAR(20),
 BRANCH_NAME VARCHAR(100),
 CURRENT_FLAG BIT DEFAULT 1
)
GO
CREATE TABLE FactGL
(
 GLDWKEY INT FOREIGN KEY REFERENCES DimGL(GLDWKEY),
 AMOUNT_DR_LCY MONEY,
 AMOUNT_CR_LCY MONEY,
 AMOUNT_DR_FCY MONEY,
 AMOUNT_CR_FCY MONEY,
 CLOSING_BAL_LCY MONEY,
 CLOSING_BAL_FCY MONEY,
 REPORT_DATE DATE,
 DB_DATE DATE
)
GO
ALTER TABLE FactGL
REBUILD WITH (DATA_COMPRESSION=PAGE)
GO
CREATE CLUSTERED INDEX IDX_FactGL_REPORT_DATE ON FactGL(REPORT_DATE)
CREATE NONCLUSTERED INDEX IDX_FactGL_GLDWKEY ON FactGL(GLDWKEY)
GO
CREATE TABLE FactPL
(
 PLDWKEY INT FOREIGN KEY REFERENCES DimPL(PLDWKEY),
 AMOUNT_DR_LCY MONEY,
 AMOUNT_CR_LCY MONEY,
 AMOUNT_DR_FCY MONEY,
 AMOUNT_CR_FCY MONEY,
 CLOSING_BAL_LCY MONEY,
 CLOSING_BAL_FCY MONEY,
 REPORT_DATE DATE,
 DB_DATE DATE
)
GO
ALTER TABLE FactPL
REBUILD WITH (DATA_COMPRESSION=PAGE)
GO
CREATE CLUSTERED INDEX IDX_FactPL_REPORT_DATE ON FactPL(REPORT_DATE)
CREATE NONCLUSTERED INDEX IDX_FactPL_PLDWKEY ON FactPL(PLDWKEY)
GO
=======================================================================
 STORED PROCEDURE DB2 (23 Parameters)
=======================================================================
CREATE PROCEDURE spCRF
(
IN pCRFID VARCHAR(100),IN pREPORT_LINE VARCHAR(20),IN pLINE_NO VARCHAR(10),IN pDESCRIPTION VARCHAR(50),IN pCURRENCY VARCHAR(5),
IN pAMOUNT_DR_LCY VARCHAR(20),IN pAMOUNT_CR_LCY VARCHAR(20),IN pAMOUNT_DR_FCY VARCHAR(20),IN pAMOUNT_CR_FCY VARCHAR(20),
IN pCLOSING_BAL_LCY,IN pCLOSING_BAL_FCY,IN pMNEMONIC VARCHAR(5),IN pCRF_TYPE VARCHAR(10),
IN pCRF_CATEGORY VARCHAR(10),IN pCRF_SECTOR VARCHAR(10),IN pCRF_RESIDENCE VARCHAR(5),IN pCRF_PRODUCT VARCHAR(10),
IN pCRF_DEPT VARCHAR(10),IN pCRF_INDUSTRY VARCHAR(10),IN pBRANCH VARCHAR(20),IN pBRANCH_NAME VARCHAR(100),IN pREPORT_DATE VARCHAR(20),IN pDB_DATE VARCHAR(20)
)
LANGUAGE SQL
BEGIN
  INSERT INTO CRF (CRFID,REPORT_LINE,LINE_NO,DESCRIPTION,CURRENCY,AMOUNT_DR_LCY,AMOUNT_DR_LCY,AMOUNT_DR_FCY,AMOUNT_CR_FCY,CLOSING_BAL_LCY,CLOSING_BAL_FCY,
                   MNEMONIC,CRF_TYPE,CRF_CATEGORY,CRF_SECTOR,CRF_RESIDENCE,CRF_PRODUCT,CRF_DEPT,CRF_INDUSTRY,BRANCH,BRANCH_NAME,REPORT_DATE,DB_DATE
                  )
		   VALUES (pCRFID,pREPORT_LINE,pLINE_NO,pDESCRIPTION,pCURRENCY,pAMOUNT_DR_LCY,pAMOUNT_CR_LCY,pAMOUNT_DR_FCY,pAMOUNT_CR_FCY,pCLOSING_BAL_LCY,pCLOSING_BAL_FCY,
                   pMNEMONIC,pCRF_TYPE,pCRF_CATEGORY,pCRF_SECTOR,pCRF_RESIDENCE,pCRF_PRODUCT,pCRF_DEPT,pCRF_INDUSTRY,pBRANCH,pBRANCH_NAME,pREPORT_DATE,pDB_DATE
				  );
END
=======================================================================
 STORED PROCEDURE MS SQL SERVER (23 Parameters)
=======================================================================
CREATE PROCEDURE spCRF
(
     @pCRFID VARCHAR(100),@pREPORT_LINE VARCHAR(20),@pLINE_NO VARCHAR(10),@pDESCRIPTION VARCHAR(50),@pCURRENCY VARCHAR(5),
     @pAMOUNT_DR_LCY VARCHAR(20),@pAMOUNT_CR_LCY VARCHAR(20),@pAMOUNT_DR_FCY VARCHAR(20),@pAMOUNT_CR_FCY VARCHAR(20),
	 @pCLOSING_BAL_LCY VARCHAR(20),@pCLOSING_BAL_FCY VARCHAR(20),@pMNEMONIC VARCHAR(5),@pCRF_TYPE VARCHAR(50),
	 @pCRF_CATEGORY VARCHAR(10),@pCRF_SECTOR VARCHAR(10),@pCRF_RESIDENCE VARCHAR(5),@pCRF_PRODUCT VARCHAR(10),
	 @pCRF_DEPT VARCHAR(10),@pCRF_INDUSTRY VARCHAR(10),@pBRANCH VARCHAR(20),@pBRANCH_NAME VARCHAR(100),@pREPORT_DATE VARCHAR(20),@pDB_DATE VARCHAR(20)
)
AS
BEGIN
  INSERT INTO CRF (CRFID,REPORT_LINE,LINE_NO,DESCRIPTION,CURRENCY,AMOUNT_DR_LCY,AMOUNT_CR_LCY,AMOUNT_DR_FCY,AMOUNT_CR_FCY,CLOSING_BAL_LCY,CLOSING_BAL_FCY,
                   MNEMONIC,CRF_TYPE,CRF_CATEGORY,CRF_SECTOR,CRF_RESIDENCE,CRF_PRODUCT,CRF_DEPT,CRF_INDUSTRY,BRANCH,BRANCH_NAME,REPORT_DATE,DB_DATE
                  )
		   VALUES (@pCRFID,@pREPORT_LINE,@pLINE_NO,@pDESCRIPTION,@pCURRENCY,@pAMOUNT_DR_LCY,@pAMOUNT_CR_LCY,@pAMOUNT_DR_FCY,@pAMOUNT_CR_FCY,
                   @pCLOSING_BAL_LCY VARCHAR(20),@pCLOSING_BAL_FCY VARCHAR(20),@pMNEMONIC,@pCRF_TYPE,@pCRF_CATEGORY,@pCRF_SECTOR,@pCRF_RESIDENCE,
				   @pCRF_PRODUCT,@pCRF_DEPT,@pCRF_INDUSTRY,@pBRANCH,@pBRANCH_NAME,@pREPORT_DATE,@pDB_DATE
				  )
END