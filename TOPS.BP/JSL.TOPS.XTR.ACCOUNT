SUBROUTINE JSL.TOPS.XTR.ACCOUNT

*============================================
* Title: BI Account Data Extraction
* Initial Author: Yisau Ramon ; For Tops Analytics
* Date: 1st May 2018
*============================================

    $INSERT I_COMMON
    $INSERT I_EQUATE
    $INSERT I_F.EB.CONTRACT.BALANCES
    $INSERT I_F.ACCOUNT
    $INSERT I_F.DATES
    $INSERT I_F.POSTING.RESTRICT
	$INSERT I_F.COMPANY
	$INSERT I_F.DEPT.ACCT.OFFICER
	$INSERT I_F.INTERCO.PARAMETER
	$INSERT I_F.ACCT.ACTIVITY
	
    GOSUB INIT
    GOSUB PROCESS
    RETURN

INIT:
    FN.INTERCO='F.INTERCO.PARAMETER'
    F.INTERCO=''
    CALL OPF(FN.INTERCO,F.INTERCO)
	
    DLM='|' ; OP.CL=0 ; OCB=0 ; OAB=0 ; OP.ACT.BAL=0 ; WBAL=0 ; V.DATE=TODAY 
	AC.ID='' ; R.AC=''; OUT.ARR='' ; PY.LIST='' 
    DB.DATE=TODAY[1,4]:'-':TODAY[5,2]:'-':TODAY[7,2] 
	REPORT.DATE=R.DATES(EB.DAT.LAST.WORKING.DAY)[1,4]:'-':R.DATES(EB.DAT.LAST.WORKING.DAY)[5,2]:'-':R.DATES(EB.DAT.LAST.WORKING.DAY)[7,2]
	SYS.ID='SYSTEM' ; API.ID='JSL.TOPS.API' ; V.RESPONSE='' ; RET.ERR=''
	READ R.INTERCO FROM F.INTERCO,SYS.ID ELSE NULL
	MNE.LIST=R.INTERCO<ST.ICP.FIN.MNEMONIC>
    RETURN

PROCESS:
    MNE.CNT=DCOUNT(MNE.LIST,@VM)
    FOR J=1 TO MNE.CNT
    MNE=MNE.LIST<1,J>
    FN.ECB='F':MNE:'.EB.CONTRACT.BALANCES'
    F.ECB=''
    CALL OPF(FN.ECB,F.ECB)
    FN.AC='F':MNE:'.ACCOUNT'
    F.AC=''
    CALL OPF(FN.AC,F.AC)
    AC.CMD='SELECT ':FN.AC
    CALL EB.READLIST(AC.CMD,AC.LIST,'','','')
    LOOP
        REMOVE AC.ID FROM AC.LIST SETTING AC.POS
        IF AC.POS=0 THEN GOSUB LOAD.DATA
    WHILE AC.ID:AC.POS
        CALL F.READ(FN.AC,AC.ID,R.AC,F.AC,AC.ERR)
        CALL F.READ(FN.ECB,AC.ID,R.ECB,F.ECB,ECB.ERR)
		CALL DBR('POSTING.RESTRICT':FM:AC.POS.DESCRIPTION,R.AC<AC.POSTING.RESTRICT>,PO.DESC)
		OP.DTE=R.AC<AC.OPENING.DATE>[1,4]:'-':R.AC<AC.OPENING.DATE>[5,2]:'-':R.AC<AC.OPENING.DATE>[7,2]
		FNAME=DQUOTE(R.AC<AC.ACCOUNT.TITLE.1>) ; WBAL=R.ECB<ECB.WORKING.BALANCE> ; OAB=R.ECB<ECB.ONLINE.ACTUAL.BAL>
		SNAME=DQUOTE(R.AC<AC.SHORT.TITLE>) ; OCB=R.ECB<ECB.ONLINE.CLEARED.BAL> ; OP.ACT.BAL=R.ECB<ECB.OPEN.ACTUAL.BAL>
		OP.CL.BAL=R.ECB<ECB.OPEN.CLEARED.BAL> ; ACCR.CR=R.AC<AC.ACCR.CR.AMOUNT> ; ACCR.DR=R.AC<AC.ACCR.DR.AMOUNT> 
		CALL DBR('COMPANY':FM:EB.COM.COMPANY.NAME,R.AC<AC.CO.CODE>,BRANCH.NAME)
		CALL DBR('DEPT.ACCT.OFFICER':FM:EB.DAO.NAME,R.AC<AC.ACCOUNT.OFFICER>,OFFICER.NAME)
		CALL DBR('DEPT.ACCT.OFFICER':FM:EB.DAO.NAME,R.AC<AC.OTHER.OFFICER>,OTHER.NAME)
		CALL DBR('CATEGORY':FM:EB.CAT.DESCRIPTION,R.AC<AC.CATEGORY>,CATEGORY.DESC)
		CHANGE ',' TO ' ' IN FNAME
		CHANGE ',' TO ' ' IN SNAME
		CHANGE ',' TO ' ' IN BRANCH.NAME
		CHANGE ',' TO ' ' IN OFFICER.NAME
		CHANGE ',' TO ' ' IN OTHER.NAME
		CHANGE ',' TO ' ' IN CATEGORY.DESC
		GOSUB ACTIVITY
		OUT.ARR=AC.ID:DLM:R.AC<AC.CUSTOMER>:DLM:R.AC<AC.CATEGORY>:DLM:DQUOTE(CATEGORY.DESC):DLM:FNAME:DLM:SNAME:DLM:R.AC<AC.CURRENCY>
		OUT.ARR:=DLM:R.AC<AC.ACCOUNT.OFFICER>:DLM:DQUOTE(OFFICER.NAME):DLM:OP.DTE:DLM:WBAL:DLM:OAB:DLM:OCB:DLM:OP.ACT.BAL:DLM:OP.CL
		OUT.ARR:=DLM:ACCR.CR:DLM:ACCR.DR:DLM:R.AC<AC.POSTING.RESTRICT>:DLM:DQUOTE(PO.DESC):DLM:R.AC<AC.INACTIV.MARKER>
		OUT.ARR:=DLM:R.AC<AC.ALT.ACCT.ID>:DLM:R.AC<AC.OVERDUE.STATUS>:DLM:R.AC<AC.ARRANGEMENT.ID>
		OUT.ARR:=DLM:R.AC<AC.OTHER.OFFICER>:DLM:DQUOTE(OTHER.NAME):DLM:R.AC<AC.CO.CODE>:DLM:DQUOTE(BRANCH.NAME)
		OUT.ARR:=DLM:CR.MVT:DLM:DR.MVT:DLM:NET.MVT:DLM:REPORT.DATE:DLM:DB.DATE

        PY.LIST<-1>=OUT.ARR
		CNT=DCOUNT(PY.LIST,FM)
         IF CNT GE '80000' THEN
            GOSUB LOAD.DATA
         END
        AC.ID='' ; R.AC=''; OUT.ARR='' ; SNAME='' ; FNAME='' ; OP.DTE='' ; OP.CL=''
		BRANCH.NAME='' ; ACCR.CR=0 ; ACCR.DR=0 ; OP.ACT.BAL=0 ; OAB=0 ; WBAL=0 ; OCB=0 
		OFFICER.NAME='' ; OTHER.NAME='' ; CATEGORY.DESC='' ; DR.MVT='' ; CR.MVT='' ; NET.MVT=''
		
    REPEAT
	NEXT J
    RETURN
LOAD.DATA:
	 IF PY.LIST NE '' THEN
	 PY.LIST=TRIM(PY.LIST,',','A')
	 PY.LIST=TRIM(PY.LIST,"'",'A')
	 PY.LIST=TRIM(PY.LIST,"~",'A')
	 CHANGE FM TO ',' IN PY.LIST
     REQUEST=PY.LIST:"~AC"
       CALL EB.CALL.JAVA.API(API.ID,REQUEST,V.RESPONSE,RET.ERR)
     PY.LIST=''
	 END
    RETURN
ACTIVITY:
            IF NOT(R.AC<AC.CATEGORY> GE '3000' AND R.AC<AC.CATEGORY> LE '3999') THEN 
            ACCT.DATES='' ; DATE.REC=''
            CALL GET.ACTIVITY.DATES(AC.ID, ACCT.DATES)
            DATE.REC=MAXIMUM(ACCT.DATES)
            BALANCE.TYPE='TRADE' ; ACTIVITY.REC='' ; ACCT.REC=''
            CALL EB.GET.ACCT.ACTIVITY(AC.ID, ACCT.REC, DATE.REC, BALANCE.TYPE, SYSTEM.DATE, ACTIVITY.REC)
            DR.MVT=ABS(SUM(ACTIVITY.REC<IC.ACT.TURNOVER.DEBIT>))
			CR.MVT=SUM(ACTIVITY.REC<IC.ACT.TURNOVER.CREDIT>)
			NET.MVT=CR.MVT-DR.MVT
			END
	RETURN
END


=================================================================================================
STAGING TABLE SCHEMA
=================================================================================================
CREATE TABLE ACCOUNT
(
   ACCOUNTID VARCHAR(20),
   CUSTOMERID VARCHAR(10),
   CATEGORY VARCHAR(10),
   CATEGORY_DESC VARCHAR(100),
   ACCOUNT_TITLE_1 VARCHAR(100),
   SHORT_TITLE VARCHAR(100),
   CURRENCY VARCHAR(5),
   ACCOUNT_OFFICER VARCHAR(10),
   OFFICER_NAME VARCHAR(100),
   OPENING_DATE VARCHAR(20),
   WORKING_BALANCE VARCHAR(20),
   ONLINE_ACTUAL_BAL VARCHAR(20),
   ONLINE_CLEARED_BAL VARCHAR(20),
   OPEN_ACTUAL_BAL VARCHAR(20),
   OPEN_CLEARED_BAL VARCHAR(20),
   ACCRUAL_CR_AMT VARCHAR(20),
   ACCRUAL_DR_AMT VARCHAR(20),
   POSTING_RESTRICT VARCHAR(10),
   POSTING_RESTRICT_DESC VARCHAR(100),
   INACTIV_MARKER VARCHAR(5),
   ALT_ACCT_ID VARCHAR(50),
   OVERDUE_STATUS VARCHAR(5),
   ARRANGEMENT_ID VARCHAR(20),
   OTHER_OFFICER VARCHAR(10),
   OTHER_NAME VARCHAR(100),
   BRANCH VARCHAR(50),
   BRANCH_NAME VARCHAR(100),
   CR_MVT VARCHAR(20),
   DR_MVT VARCHAR(20),
   NET_MVT VARCHAR(20),
   REPORT_DATE VARCHAR(20),
   DB_DATE VARCHAR(20)
)

=====================================================================================
DW TABLES
=====================================================================================
CREATE TABLE DimACCOUNT
(
   ACCOUNTDWKEY INT IDENTITY PRIMARY KEY,
   ACCOUNTID VARCHAR(20),
   CUSTOMERID VARCHAR(10),
   CATEGORY VARCHAR(10),
   CATEGORY_DESC VARCHAR(100),
   ACCOUNT_TITLE_1 VARCHAR(100),
   SHORT_TITLE VARCHAR(100),
   CURRENCY VARCHAR(5),
   ACCOUNT_OFFICER VARCHAR(10),
   OFFICER_NAME VARCHAR(100),
   POSTING_RESTRICT VARCHAR(10),
   POSTING_RESTRICT_DESC VARCHAR(100),
   INACTIV_MARKER VARCHAR(5),
   ALT_ACCT_ID VARCHAR(50),
   OVERDUE_STATUS VARCHAR(5),
   ARRANGEMENT_ID VARCHAR(20),
   OTHER_OFFICER VARCHAR(10),
   OTHER_NAME VARCHAR(100),
   BRANCH VARCHAR(50),
   BRANCH_NAME VARCHAR(100),
   CURRENT_FLAG BIT DEFAULT 1
)
GO
CREATE TABLE FactACCOUNT
(
   ACCOUNTDWKEY INT FOREIGN KEY REFERENCES DimACCOUNT(ACCOUNTDWKEY),
   WORKING_BALANCE MONEY,
   ONLINE_ACTUAL_BAL MONEY,
   ONLINE_CLEARED_BAL MONEY,
   OPEN_ACTUAL_BAL MONEY,
   OPEN_CLEARED_BAL MONEY,
   ACCRUAL_CR_AMT MONEY,
   ACCRUAL_DR_AMT MONEY,
   OPENING_DATE DATE,
   CR_MVT MONEY,
   DR_MVT MONEY,
   NET_MVT MONEY,
   REPORT_DATE DATE,
   DB_DATE DATE
)
GO
ALTER TABLE FactACCOUNT
REBUILD WITH (DATA_COMPRESSION=PAGE)
GO
CREATE CLUSTERED INDEX IDX_FactACCOUNT_REPORT_DATE ON FactACCOUNT(REPORT_DATE)
CREATE NONCLUSTERED INDEX IDX_FactACCOUNT_ACCOUNTDWKEY ON FactACCOUNT(ACCOUNTDWKEY)
GO
=====================================================================================
STORED PROCEDURE (32 Parameters)
=====================================================================================

CREATE PROCEDURE spACCOUNT
(
   IN pACCOUNTID VARCHAR(20),IN pCUSTOMERID VARCHAR(10),IN pCATEGORY VARCHAR(10),IN pCATEGORY_DESC VARCHAR(100),IN pACCOUNT_TITLE_1 VARCHAR(100),
   IN pSHORT_TITLE VARCHAR(100),IN pCURRENCY VARCHAR(5),IN pACCOUNT_OFFICER VARCHAR(10),IN pOFFICER_NAME VARCHAR(100),IN pOPENING_DATE VARCHAR(20),
   IN pWORKING_BALANCE VARCHAR(20),IN pONLINE_ACTUAL_BAL VARCHAR(20),IN pONLINE_CLEARED_BAL VARCHAR(20),
   IN pOPEN_ACTUAL_BAL VARCHAR(20),IN pOPEN_CLEARED_BAL VARCHAR(20),IN pACCRUAL_CR_AMT VARCHAR(20),IN pACCRUAL_DR_AMT VARCHAR(20),
   IN pPOSTING_RESTRICT VARCHAR(10),IN pPOSTING_RESTRICT_DESC VARCHAR(100),IN pINACTIV_MARKER VARCHAR(5),IN pALT_ACCT_ID VARCHAR(50),
   IN pOVERDUE_STATUS VARCHAR(5),IN pARRANGEMENT_ID VARCHAR(20),IN pOTHER_OFFICER VARCHAR(10),
   IN pOTHER_NAME VARCHAR(100),IN pBRANCH VARCHAR(50),IN pBRANCH_NAME VARCHAR(100),
   IN pCR_MVT VARCHAR(20),IN pDR_MVT VARCHAR(20),IN pNET_MVT VARCHAR(20),IN pREPORT_DATE VARCHAR(20),IN pDB_DATE VARCHAR(20)
)
LANGUAGE SQL
BEGIN
 INSERT INTO ACCOUNT
 (
   ACCOUNTID,CUSTOMERID,CATEGORY,CATEGORY_DESC,ACCOUNT_TITLE_1,SHORT_TITLE,CURRENCY,ACCOUNT_OFFICER,OFFICER_NAME,OPENING_DATE,
   WORKING_BALANCE,ONLINE_ACTUAL_BAL,ONLINE_CLEARED_BAL,OPEN_ACTUAL_BAL,OPEN_CLEARED_BAL,ACCRUAL_CR_AMT,ACCRUAL_DR_AMT,
   POSTING_RESTRICT,POSTING_RESTRICT_DESC,INACTIV_MARKER,ALT_ACCT_ID,OVERDUE_STATUS,ARRANGEMENT_ID,OTHER_OFFICER,OTHER_NAME,
   BRANCH,BRANCH_NAME,CR_MVT,DR_MVT,NET_MVT,REPORT_DATE,DB_DATE
)
VALUES
(
   pACCOUNTID,pCUSTOMERID,pCATEGORY,pCATEGORY,pACCOUNT_TITLE_1,pSHORT_TITLE,pCURRENCY,pACCOUNT_OFFICER,pOFFICER_NAME,pOPENING_DATE,
   pWORKING_BALANCE,pONLINE_ACTUAL_BAL,pONLINE_CLEARED_BAL,pOPEN_ACTUAL_BAL,pOPEN_CLEARED_BAL,pACCRUAL_CR_AMT,pACCRUAL_DR_AMT,
   pPOSTING_RESTRICT,pPOSTING_RESTRICT_DESC,pINACTIV_MARKER,pALT_ACCT_ID,pOVERDUE_STATUS,pARRANGEMENT_ID,
   pOTHER_OFFICER,pOTHER_NAME,pSUB_PRODUCT,pBRANCH,pBRANCH_NAME,pCR_MVT,pDR_MVT,pNET_MVT,pREPORT_DATE,pDB_DATE

);
END

=====================================================================================
STORED PROCEDURE MS SQL SERVER (32 Parameters)
=====================================================================================

CREATE PROCEDURE spACCOUNT
(
   @pACCOUNTID VARCHAR(20),@pCUSTOMERID VARCHAR(10),@pCATEGORY VARCHAR(10),@pCATEGORY_DESC VARCHAR(100),@pACCOUNT_TITLE_1 VARCHAR(100),
   @pSHORT_TITLE VARCHAR(100),@pCURRENCY VARCHAR(5),@pACCOUNT_OFFICER VARCHAR(10),@pOFFICER_NAME VARCHAR(100),@pOPENING_DATE VARCHAR(20),
   @pWORKING_BALANCE VARCHAR(20),@pONLINE_ACTUAL_BAL VARCHAR(20),@pONLINE_CLEARED_BAL VARCHAR(20),
   @pOPEN_ACTUAL_BAL VARCHAR(20),@pOPEN_CLEARED_BAL VARCHAR(20),@pACCRUAL_CR_AMT VARCHAR(20),@pACCRUAL_DR_AMT VARCHAR(20),
   @pPOSTING_RESTRICT VARCHAR(10),@pPOSTING_RESTRICT_DESC VARCHAR(100),@pINACTIV_MARKER VARCHAR(5),@pALT_ACCT_ID VARCHAR(50),
   @pOVERDUE_STATUS VARCHAR(5),@pARRANGEMENT_ID VARCHAR(20),@pOTHER_OFFICER VARCHAR(10),@pOTHER_NAME VARCHAR(100),
   @pBRANCH VARCHAR(50),@pBRANCH_NAME VARCHAR(100),@pCR_MVT VARCHAR(20),@pDR_MVT VARCHAR(20),@pNET_MVT VARCHAR(20),
   @pREPORT_DATE VARCHAR(20),@pDB_DATE VARCHAR(20)
)
AS
BEGIN
 INSERT INTO ACCOUNT
 (
   ACCOUNTID,CUSTOMERID,CATEGORY,CATEGORY_DESC,ACCOUNT_TITLE_1,SHORT_TITLE,CURRENCY,ACCOUNT_OFFICER,OFFICER_NAME,OPENING_DATE,
   WORKING_BALANCE,ONLINE_ACTUAL_BAL,ONLINE_CLEARED_BAL,OPEN_ACTUAL_BAL,OPEN_CLEARED_BAL,ACCRUAL_CR_AMT,ACCRUAL_DR_AMT,
   POSTING_RESTRICT,POSTING_RESTRICT_DESC,INACTIV_MARKER,ALT_ACCT_ID,OVERDUE_STATUS,ARRANGEMENT_ID,OTHER_OFFICER,
   OTHER_NAME,BRANCH,BRANCH_NAME,CR_MVT,DR_MVT,NET_MVT,REPORT_DATE,DB_DATE
)
VALUES(@pACCOUNTID,@pCUSTOMERID,@pCATEGORY,@pCATEGORY_DESC,@pACCOUNT_TITLE_1,@pSHORT_TITLE,@pCURRENCY,@pACCOUNT_OFFICER,
      @pOFFICER_NAME,@pOPENING_DATE,@pWORKING_BALANCE,@pONLINE_ACTUAL_BAL,@pONLINE_CLEARED_BAL,@pOPEN_ACTUAL_BAL,
	  @pOPEN_CLEARED_BAL,@pACCRUAL_CR_AMT,@pACCRUAL_DR_AMT,@pPOSTING_RESTRICT,@pPOSTING_RESTRICT_DESC,@pINACTIV_MARKER,
      @pALT_ACCT_ID,@pOVERDUE_STATUS,@pARRANGEMENT_ID,@pOTHER_OFFICER,@pOTHER_NAME,@pBRANCH,@pBRANCH_NAME,@pCR_MVT,
	  @pDR_MVT,@pNET_MVT,@pREPORT_DATE,@pDB_DATE
      )
END